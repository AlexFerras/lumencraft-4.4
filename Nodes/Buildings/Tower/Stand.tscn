[gd_scene load_steps=10 format=2]

[ext_resource path="res://Nodes/Buildings/Tower/Stand.png" type="Texture2D" id=1]
[ext_resource path="res://Nodes/Map/LavaChecks.gd" type="Script" id=2]
[ext_resource path="res://Nodes/Buildings/Tower/Stand_shadow.png" type="Texture2D" id=3]
[ext_resource path="res://Nodes/Map/ZIndexer.tscn" type="PackedScene" id=4]
[ext_resource path="res://Nodes/Buildings/Icons/IconStand.tscn" type="PackedScene" id=5]
[ext_resource path="res://Nodes/Lights/LightSprite.gd" type="Script" id=6]
[ext_resource path="res://Nodes/Buildings/Tower/Powered.png" type="Texture2D" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends BaseBuilding

@onready var powered_fx: Node2D = $Powered

var powered: bool
var tween: Tween

func _ready() -> void:
	collision_mask |= Const.PLAYER_COLLISION_LAYER
	Utils.subscribe_tech(self, \"powered_stands\")
	powered_fx.modulate.a = 0

func _tech_unlocked(tech: String):
	match tech:
		\"powered_stands\":
			needs_power = true
			set_disabled(true)
		_:
			super._tech_unlocked(tech)

func add_to_tracker():
	Utils.add_to_tracker(self, Utils.game.map.passive_buildings_tracker, radius, 0)

func apply_mask(mat):
	return

func enter(area: Area2D) -> void:
	var player := Player.get_from_area(area)
	if player:
		player.on_stand = 1 + int(powered)
		if powered:
			Utils.play_sample(preload(\"res://SFX/Turret/TurretReady.wav\"), player)
			player.stand_particles.emitting = true
		
		var seq := player.create_tween()
		seq.parallel().tween_property(player.torso, \"scale\", player.torso_scale * 1.3, 0.2)
		seq.parallel().tween_property(player, \"z_index\", ZIndexer.Indexes.BUILDING_HIGH + 10, 0.2)

func exited(area: Area2D) -> void:
	var player := Player.get_from_area(area)
	if player:
		player.on_stand = 0
		var seq := player.create_tween()
		seq.parallel().tween_property(player.torso, \"scale\", player.torso_scale, 0.2)
		seq.parallel().tween_property(player, \"z_index\", ZIndexer.Indexes.PLAYER, 0.2)
		player.stand_particles.emitting = false

func update_angle():
	rotation = angle

func set_disabled(disabled: bool, force := false):
	super.set_disabled(disabled, force)
	
	if not powered and not disabled:
		if tween:
			tween.kill()
		
		powered_fx.is_static = false
		tween = create_tween()
		tween.tween_property(powered_fx, \"modulate:a\", 1.0, 0.5)
		tween.tween_callback(Callable(powered_fx, \"set_deferred\").bind(\"is_static\", true))
	elif powered and disabled:
		if tween:
			tween.kill()
		
		powered_fx.is_static = true
		tween = create_tween()
		tween.tween_property(powered_fx, \"modulate:a\", 0.0, 0.5)
		tween.tween_callback(Callable(powered_fx, \"set_deferred\").bind(\"is_static\", false))
	
	powered = not disabled
"

[sub_resource type="CircleShape2D" id=2]
radius = 11.8384

[node name="Stand" type="Area2D"]
z_index = -200
z_as_relative = false
script = SubResource( 1 )
radius = 12.0
needs_power = false

[node name="StandShadow" type="Sprite2D" parent="."]
scale = Vector2( 0.807383, 0.807383 )
texture = ExtResource( 3 )

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 1 )

[node name="Powered" type="Node2D" parent="."]
modulate = Color( 0, 10, 10, 1 )
scale = Vector2( 0.1, 0.1 )
script = ExtResource( 6 )
texture = ExtResource( 7 )
is_static = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="LavaChecks" type="Node2D" parent="."]
visible = false
script = ExtResource( 2 )

[node name="Marker2D" type="Marker2D" parent="LavaChecks"]
position = Vector2( -0.265322, -20.5871 )

[node name="Position2D2" type="Marker2D" parent="LavaChecks"]
position = Vector2( 20.9456, 0.123474 )

[node name="Position2D3" type="Marker2D" parent="LavaChecks"]
position = Vector2( -0.303263, 20.7991 )

[node name="Position2D4" type="Marker2D" parent="LavaChecks"]
position = Vector2( -20.7363, 0.0161247 )

[node name="ZIndexer" parent="." instance=ExtResource( 4 )]
z_index = -200

[node name="Icon" parent="." instance=ExtResource( 5 )]
visible = false

[connection signal="area_entered" from="." to="." method="enter"]
[connection signal="area_exited" from="." to="." method="exited"]
