[gd_scene load_steps=16 format=3 uid="uid://f0nd7uyhpbea"]

[ext_resource type="PackedScene" path="res://Nodes/Buildings/Common/Computer/ComputerScreen.tscn" id="1"]
[ext_resource type="Script" uid="uid://cvoge1g26dgvg" path="res://Nodes/Buildings/Common/Computer/ComputerInteractable.gd" id="2"]
[ext_resource type="Script" uid="uid://ce6ne1q8adv6i" path="res://Nodes/Buildings/Wall/Wall.gd" id="3"]
[ext_resource type="Texture2D" uid="uid://cq42l43g31ot3" path="res://Nodes/Buildings/Wall/Level1.png" id="4"]
[ext_resource type="Texture2D" uid="uid://eng1qum3sgkb" path="res://Nodes/Buildings/Wall/WallDestroyed.png" id="5"]
[ext_resource type="Texture2D" uid="uid://dbm6faqljvboj" path="res://Resources/Textures/Cracks.png" id="6"]
[ext_resource type="Texture2D" uid="uid://dqmgebadythey" path="res://Resources/Textures/NoiseRGB.png" id="7"]
[ext_resource type="Script" uid="uid://bn04jmoeak073" path="res://Nodes/Buildings/Wall/DestructibleSprite.gd" id="8"]
[ext_resource type="PackedScene" path="res://Nodes/Map/ZIndexer.tscn" id="9"]
[ext_resource type="Texture2D" uid="uid://coii6mdk4bj0m" path="res://Nodes/Lights/Textures/SmoothRect.png" id="10"]

[sub_resource type="GDScript" id="12"]
resource_name = "WallComputer"
script/source = "extends \"res://Nodes/Buildings/Common/Computer/GenericComputer.gd\"

@onready var wall := get_parent() 

func _can_use() -> bool:
	if wall.wall_lvl >= 3 or wall.dead:
		return false
	
	if wall.wall_lvl == 1:
		return BaseBuilding.is_requirement_met(\"reactor_lvl:2\")
	elif wall.wall_lvl == 2:
		return BaseBuilding.is_requirement_met(\"reactor_lvl:3\")
	
	return true

func _setup():
	if not active:
		return
	
	var upgrade_number = wall.wall_lvl
	if upgrade_number > 2:
		if active:
			screen.set_title(str(\"Durability\"),false)
			set_description([\"8\", tr(\"Fire Resistant\"), tr(\"Slows Flying\")])
		set_disabled(true)
	elif upgrade_number == 2:
		if active:
			screen.set_title(str(\"Durability\"),false)
			set_description([\"6 -> 8\", tr(\"Slows Flying\"), make_requirement(\"reactor_lvl:3\")])
			screen.set_interact_action(\"Upgrade\")
			screen.add_cost_no_total(Const.ItemIDs.METAL_SCRAP,100)
	elif upgrade_number == 1:
		if active:
			screen.set_title(str(tr(\"Durability\"), \" \", upgrade_number + 1),false)
			set_description([\"4 -> 6\", tr(\"Fire Resistant\"), make_requirement(\"reactor_lvl:2\")])
			screen.set_interact_action(\"Upgrade\")
			screen.add_cost_no_total(Const.ItemIDs.METAL_SCRAP,100)
	elif upgrade_number == 0:
		if active:
			screen.set_title(str(tr(\"Durability\"), \" \", upgrade_number + 1),false)
			set_description([\"2 -> 4\"])
			screen.set_interact_action(\"Upgrade\")
			screen.add_cost_no_total(Const.ItemIDs.METAL_SCRAP, 50)

func _make():
	wall.wall_lvl = wall.wall_lvl + 1
	reload()

func set_description(strings: Array):
	screen.set_description(\"\\n\".join(PackedStringArray(Utils.array_map(strings, Callable(self, \"make_centered\")))))

func make_centered(element: String):
	return \"[center]%s[/center]\" % element

func make_requirement(requirement: String) -> String:
	if BaseBuilding.is_requirement_met(requirement):
		return \"[color=green]%s: %s[/color]\" % [tr(\"Required\"), BaseBuilding.get_requirement_text(requirement)]
	else:
		return \"[color=red]%s: %s[/color]\" % [tr(\"Required\"), BaseBuilding.get_requirement_text(requirement)]
"

[sub_resource type="RectangleShape2D" id="75"]
size = Vector2(80, 920)

[sub_resource type="RectangleShape2D" id="76"]
size = Vector2(240, 80)

[sub_resource type="Shader" id="9"]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode skip_vertex_transform ;

uniform mat4 global_transform;

uniform bool let_me_see= false;
uniform float masked_material_number= 26.0;
uniform float random_blur =0.5;
uniform float shuffle_tile_border =4.0;
uniform float blur_amount =1.5;
uniform float random_blur_border =4.0;
uniform float random_noise_mul =2.0;


uniform sampler2D crack_tiled;
uniform float crack_tile_mul =5.0;

uniform sampler2D random_noise;
uniform sampler2D map_tex;

varying vec2 global_position;
varying vec2 worldUV;



void vertex()
{
	
global_position=(global_transform * vec4(VERTEX, 1.0, 1.0)).xy;
// TODO
	//VERTEX = (EXTRA_MATRIX * (WORLD_MATRIX * vec4(VERTEX, 1.0, 1.0))).xy;
// VERTEX=(WORLD_MATRIX*vec4(VERTEX,1.0,1.0)).xy;

global_position = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy;
// UV=(vec4(UV,1.0,1.0)*inverse(WORLD_MATRIX)).xy;
}

float when_eq(float x, float y) {
  return 1.0 - abs(sign(x - y));
}

float when_neq(float x, float y) {
  return abs(sign(x - y));
}




vec3 addCracks(vec2 UV_in_scaled, vec4 real_col, vec4 col)
{
	vec4 crack=texture(crack_tiled, vec2(UV_in_scaled*crack_tile_mul)); 
	vec4 crack_small=texture(crack_tiled, vec2(UV_in_scaled*crack_tile_mul)*3.0); 
	//commented section is to disable cracks on some material	
	float healthy=clamp(1.0-(pow(real_col.r,3.0)/*+is_res1*/),0.0,1.0);
	return col.a*(((1.0-crack.rgb*1.0)*healthy+(3.0-crack_small.rgb*3.0)*clamp(healthy-0.6,0.0,1.0))); //crack damaged terrain	
}


vec4 getMapColor(sampler2D map_texture,vec2 UV_in)
{
	vec2 tex_size=vec2(textureSize(map_texture,0));
	vec2 inv_size=1.0/tex_size;

	vec4 real_col=texture(map_texture, UV_in);

	vec2 UV_in_scaled=UV_in*tex_size*0.001;

	vec2 random_blur_border_scaled=random_blur_border*inv_size;
	
	//used for alpha
	//vec4 col=textureLod(map_texture, UV_in+ random_blur_scaled* (texture(random_noise,UV_in_scaled*random_noise_mul).r-0.5),blur_amount);
	vec4 col=textureLod(map_texture, UV_in+ random_blur_border_scaled* (texture(random_noise,UV_in_scaled*random_noise_mul).rg-vec2(0.55)),blur_amount);
	//vec4 col_zero=textureLod(map_texture, UV_in+ random_blur_border_scaled* (texture(random_noise,UV_in_scaled*random_noise_mul).rg-vec2(0.55)),0);
	
	
	vec4 outCOLOR;

	{

		outCOLOR=vec4(1.0);
		outCOLOR.rgb-=addCracks(UV_in_scaled,real_col,col);
	}
	
	
	
	//if(col.a<cutoff)
	{
		//DARK AMBIENT, FROM BORDER OF TERRAIN TO EMPTY
		outCOLOR.rgb-=1.0*(1.0-col.a);
		outCOLOR.rgb*=pow(col.a,3.0);
		outCOLOR.a=pow(min((col.b<0.5/255.0)?1.0:0.0,col.a),0.6);


	}
	

	return outCOLOR*float(abs(real_col.g-(masked_material_number/255.0))<=0.00001);
}

void fragment()
{		
	COLOR=texture(TEXTURE,UV)*getMapColor(map_tex,global_position/vec2((textureSize(map_tex,0))));
	if(let_me_see)
		COLOR=texture(TEXTURE,UV);
	
}"

[sub_resource type="ShaderMaterial" id="10"]
shader = SubResource("9")
shader_parameter/global_transform = Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
shader_parameter/let_me_see = false
shader_parameter/masked_material_number = 26.0
shader_parameter/random_blur = 0.5
shader_parameter/shuffle_tile_border = 4.0
shader_parameter/blur_amount = 1.5
shader_parameter/random_blur_border = 4.0
shader_parameter/random_noise_mul = 2.0
shader_parameter/crack_tiled = ExtResource("6")
shader_parameter/crack_tile_mul = 3.306
shader_parameter/random_noise = ExtResource("7")

[node name="Wall" type="Node2D" groups=["enemy_ignore", "repair_my_pixels"]]
z_index = 500
z_as_relative = false
script = ExtResource("3")

[node name="WallComputer" type="Node2D" parent="."]
script = SubResource("12")
highlight_green = ExtResource("10")
highlight_red = ExtResource("10")
colorize_highlight = true
target_screen = NodePath("../ComputerScreen")

[node name="PlayerDetector" type="Area2D" parent="WallComputer"]
scale = Vector2(0.1, 0.1)
script = ExtResource("2")

[node name="CollisionShape2D" type="CollisionShape2D" parent="WallComputer/PlayerDetector"]
position = Vector2(0, 170)
rotation = 1.5708
shape = SubResource("75")

[node name="CollisionShape2D2" type="CollisionShape2D" parent="WallComputer/PlayerDetector"]
position = Vector2(0, -160)
rotation = 1.5708
shape = SubResource("75")

[node name="CollisionShape2D3" type="CollisionShape2D" parent="WallComputer/PlayerDetector"]
position = Vector2(-550, 9.99948)
rotation = 1.5708
shape = SubResource("76")

[node name="CollisionShape2D4" type="CollisionShape2D" parent="WallComputer/PlayerDetector"]
position = Vector2(540, 9.99951)
rotation = 1.5708
shape = SubResource("76")

[node name="Sprite2D" type="Sprite2D" parent="WallComputer"]
z_index = -201
z_as_relative = false

[node name="Highlight" type="Sprite2D" parent="WallComputer/Sprite2D"]
visible = false
self_modulate = Color(1, 1, 1, 0.396078)
scale = Vector2(0.476563, 0.122)
texture = ExtResource("10")

[node name="Destroyed" type="Sprite2D" parent="."]
z_index = -1
z_as_relative = false
scale = Vector2(0.095, 0.095)
texture = ExtResource("5")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("10")
use_parent_material = true
scale = Vector2(0.104335, 0.104335)
texture = ExtResource("4")
script = ExtResource("8")

[node name="Timer" type="Timer" parent="."]
wait_time = 10.0
one_shot = true
autostart = true

[node name="ZIndexer" parent="." instance=ExtResource("9")]
z_index = 500

[node name="check_points" type="Node2D" parent="."]
z_index = 4096

[node name="p" type="Node2D" parent="check_points"]
position = Vector2(-45.1472, -8.60947)

[node name="p2" type="Node2D" parent="check_points"]
position = Vector2(-45.5672, 0.314983)

[node name="p3" type="Node2D" parent="check_points"]
position = Vector2(-45.1472, 8.71447)

[node name="p4" type="Node2D" parent="check_points"]
position = Vector2(-33.3879, 6.71959)

[node name="p5" type="Node2D" parent="check_points"]
position = Vector2(-32.863, -8.29448)

[node name="p6" type="Node2D" parent="check_points"]
position = Vector2(-24.9884, -0.734951)

[node name="p7" type="Node2D" parent="check_points"]
position = Vector2(-15.854, -8.50447)

[node name="p8" type="Node2D" parent="check_points"]
position = Vector2(-15.434, 6.82458)

[node name="p9" type="Node2D" parent="check_points"]
position = Vector2(-6.19461, -0.839947)

[node name="p10" type="Node2D" parent="check_points"]
position = Vector2(4.72471, -8.71446)

[node name="p11" type="Node2D" parent="check_points"]
position = Vector2(5.0397, 6.82458)

[node name="p12" type="Node2D" parent="check_points"]
position = Vector2(14.8041, -1.46991)

[node name="p13" type="Node2D" parent="check_points"]
position = Vector2(22.7836, -9.23943)

[node name="p14" type="Node2D" parent="check_points"]
position = Vector2(23.5186, 7.76952)

[node name="p15" type="Node2D" parent="check_points"]
position = Vector2(31.1831, -0.104992)

[node name="p16" type="Node2D" parent="check_points"]
position = Vector2(44.6222, -10.4993)

[node name="p17" type="Node2D" parent="check_points"]
position = Vector2(44.7272, -0.944942)

[node name="p18" type="Node2D" parent="check_points"]
position = Vector2(44.2023, 7.66452)

[node name="p19" type="Node2D" parent="check_points"]
position = Vector2(44.2023, 7.66452)

[node name="polygon" type="Node2D" parent="."]

[node name="p" type="Node2D" parent="polygon"]
position = Vector2(-49.347, -12.0743)

[node name="p2" type="Node2D" parent="polygon"]
position = Vector2(48.8745, -12.5467)

[node name="p3" type="Node2D" parent="polygon"]
position = Vector2(48.4545, 11.0243)

[node name="p4" type="Node2D" parent="polygon"]
position = Vector2(-49.032, 11.4443)

[node name="ComputerScreen" parent="." instance=ExtResource("1")]

[node name="PreferredSize" type="ReferenceRect" parent="ComputerScreen"]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -350.0
offset_top = -220.0
offset_right = 350.0
offset_bottom = 220.0

[connection signal="timeout" from="Timer" to="." method="check"]
