[gd_scene load_steps=8 format=2]

[ext_resource path="res://Nodes/Pickups/Orb/TechnologyOrb.png" type="Texture2D" id=1]
[ext_resource path="res://Nodes/Map/ZIndexer.gd" type="Script" id=2]
[ext_resource path="res://Resources/Materials/PickableShine.tres" type="Material" id=3]

[sub_resource type="GDScript" id=4]
script/source = "tool
extends Pickup

@export var type : set = set_type

func _get_property_list() -> Array:
	match type:
		0:
			var storage := TextDatabase.new()
			storage.entry_name = \"tech\"
			storage.load_from_path(\"res://Resources/Data/Technology.cfg\")
			
			var tech_list: PackedStringArray
			for tech in storage.get_array():
				tech_list.append(tech.tech)
			
			return [{name = \"technology\", usage = PROPERTY_USAGE_DEFAULT, type = TYPE_STRING, hint = PROPERTY_HINT_ENUM, hint_string = \",\".join(tech_list)}]
		1:
			var tech_list: PackedStringArray
			for id in Const.game_data.upgradable_weapons:
				for upgrade in Const.Items[id].upgrades:
					tech_list.append(\"%s/%s\" % [Constants.ItemIDs.keys()[id], upgrade.name])
			
			return [
				{name = \"weapon_upgrade\", usage = PROPERTY_USAGE_DEFAULT, type = TYPE_STRING, hint = PROPERTY_HINT_ENUM, hint_string = \",\".join(tech_list)},
				{name = \"upgrade_level\", usage = PROPERTY_USAGE_DEFAULT, type = TYPE_INT}
			]
		2:
			return [
				{name = \"player_upgrade\", usage = PROPERTY_USAGE_DEFAULT, type = TYPE_STRING, hint = PROPERTY_HINT_ENUM, hint_string = \"health,speed,luck,stamina,backpack\"},
				{name = \"level\", usage = PROPERTY_USAGE_DEFAULT, type = TYPE_INT}
			]
	
	return []

func _set(property: String, value) -> bool:
	match property:
		\"technology\", \"weapon_upgrade\", \"upgrade_level\", \"player_upgrade\", \"level\":
			ensure_data()
			data[property] = value
			return true
	
	return false

func _get(property: String):
	match property:
		\"technology\", \"weapon_upgrade\", \"player_upgrade\":
			ensure_data()
			return data.get(property, \"\")
		\"upgrade_level\", \"level\":
			ensure_data()
			return data.get(property, 0)

func set_type(t: int):
	type = t
	ensure_data()
	data.clear()
	notify_property_list_changed()

func ensure_data():
	if data == null:
		data = {}
"

[sub_resource type="CircleShape2D" id=3]
radius = 8.0

[sub_resource type="Animation" id=1]
resource_name = "Orb"
length = 1.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1 ),
"transitions": PackedFloat32Array( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite2:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0, 1.2 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0 ]
}

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite2:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[node name="TechnologyOrb" type="PixelMapRigidBody"]
z_index = 50
z_as_relative = false
collision_layer = 0
collision_mask = 2
mode = 2
linear_damp = 3.0
radius = 8
pixel_map_bounce = 0.3
script = SubResource( 4 )
item = "TECHNOLOGY_ORB"
technology = ""

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 3 )

[node name="Sprite2" type="Sprite2D" parent="."]
material = ExtResource( 3 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 1 )
hframes = 4
vframes = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Orb"
anims/Orb = SubResource( 1 )
anims/RESET = SubResource( 2 )

[node name="ZIndexer" type="Node" parent="."]
script = ExtResource( 2 )
z_index = 50
