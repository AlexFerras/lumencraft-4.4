[gd_scene load_steps=16 format=3 uid="uid://cqtxx0cdfv4wf"]

[ext_resource type="Texture2D" uid="uid://btwiu6ev37pnj" path="res://Nodes/Editor/Icons/MoveDown.svg" id="1"]
[ext_resource type="Texture2D" uid="uid://blqxy5hyalre4" path="res://Nodes/Editor/Icons/MoveUp.svg" id="2"]
[ext_resource type="Texture2D" uid="uid://byjij2ot84nxe" path="res://Nodes/Editor/Icons/Remove.svg" id="3"]
[ext_resource type="FontFile" path="res://Resources/Anarchy/Fonts/spacemono_regular_micro.tres" id="4"]
[ext_resource type="FontFile" path="res://Resources/Fonts/Font28Thin.tres" id="5"]
[ext_resource type="Script" uid="uid://daawdiuxp2cq7" path="res://Nodes/UI/SmartOptionButton.gd" id="6"]
[ext_resource type="PackedScene" uid="uid://cklxjyfct51qy" path="res://Nodes/Editor/GUI/Time.tscn" id="7"]

[sub_resource type="GDScript" id="5"]
script/source = "extends Control

@onready var id = $\"%ID\" as Label
@onready var move_up_button = $\"%MoveUp\"
@onready var move_down_button = $\"%MoveDown\"

@onready var wave_name = $WaveName
@onready var time = $\"%Time\"
@onready var repeat = $\"%Repeat\"
@onready var multiplier = $\"%Multiplier\"
@onready var target = $\"%Target\"

var encounter_prefab: PackedScene

func _ready() -> void:
	if not id.has_meta(\"text\"):
		id.set_meta(\"text\", id.text)
	
	encounter_prefab = Prefab.create($Encounter)
	add_encounter()

func update_id():
	id.text = tr(id.get_meta(\"text\")) % (get_index() + 1)
	move_up_button.disabled = get_index() == 0
	move_down_button.disabled = get_index() == get_parent().get_child_count() - 2

func init_encounter(encounter: Node):
	encounter.set_meta(\"encounter\", true)
	encounter.enemy_list.connect(\"item_selected\", Callable(self, \"enemy_changed\").bind(encounter))
	enemy_changed(encounter.enemy_list.get_selected_id(), encounter)
	encounter.refresh_spawners()

func enemy_changed(idx: int, encounter: Node):
	encounter.amount.max_value = 9999 if encounter.enemy_list.get_item_metadata(idx).begins_with(\"Swarm\") else 10

func add_encounter() -> Node:
	var encounter := encounter_prefab.instantiate()
	add_child(encounter, true)
	init_encounter(encounter)
	move_child(encounter, get_child_count() - 3)
	return encounter

func set_data(data: Dictionary):
	get_node(\"Encounter\").queue_free()
	wave_name.text = data.get(\"wave_name\", \"\")
	
	time.set_time(data.wait_time)
	repeat.value = data.repeat
	multiplier.value = data.multiplier
	target.selected = data.get(\"target\", 0)
	
	for encounter in data.enemies:
		var encounter_node := add_encounter()
		encounter_node.set_data(encounter)

func get_data() -> Dictionary:
	var data: Dictionary
	data.wave_name = wave_name.text
	
	data.wait_time = time.get_time()
	data.repeat = repeat.value
	data.multiplier = multiplier.value
	data.target = target.selected
	
	data.enemies = []
	for node in get_children():
		if node.name.begins_with(\"Encounter\"):
			data.enemies.append(node.get_data())
	
	return data

func move_down() -> void:
	get_parent().move_child(self, get_index() + 1)
	get_tree().call_group(\"wave_items\", \"update_id\")

func move_up() -> void:
	get_parent().move_child(self, get_index() - 1)
	get_tree().call_group(\"wave_items\", \"update_id\")

func disable_moving():
	move_up_button.hide()
	move_down_button.hide()
	id.hide()
	$\"%DeleteWave\".hide()
	remove_from_group(\"wave_items\")
"

[sub_resource type="GDScript" id="3"]
script/source = "extends HBoxContainer

signal time_changed(time)

@export var min_1s: bool

func _ready() -> void:
	validate_time()

func set_time(time: float):
	$SpinBox.value = int(time) / 60
	$SpinBox2.value = int(time) % 60
	validate_time()

func get_time() -> float:
	return $SpinBox.value * 60 + $SpinBox2.value

func time_change(dupa) -> void:
	validate_time()
	emit_signal(\"time_changed\", get_time())

func validate_time():
	if not min_1s:
		return
	
	if $SpinBox.value == 0 and $SpinBox2.value == 0:
		$SpinBox2.value = 1
"

[sub_resource type="Theme" id="107"]
LineEdit/constants/minimum_spaces = 4

[sub_resource type="Theme" id="108"]
LineEdit/constants/minimum_spaces = 6

[sub_resource type="GDScript" id="2"]
resource_name = "Encounter"
script/source = "extends Control

const MAX_NAME = 9

@onready var enemy_list = find_child(\"Enemies\")
@onready var spawner_list = find_child(\"Spawner\")
@onready var target = find_child(\"Target\")
@onready var delay = find_child(\"Delay\")
@onready var amount = find_child(\"Amount\")

var previous_focused_spawner: int

func _ready() -> void:
	spawner_list.get_popup().connect(\"gui_input\", Callable(self, \"popup_input\"))
	spawner_list.get_popup().connect(\"popup_hide\", Callable(self, \"try_focus_spawner\").bind(-1))
	
	enemy_list.clear()
	
	var has_swarm: bool
	var has_enemy: bool
	
	for enemy in Const.game_data.get_editor_enemy_list():
		if enemy.begins_with(\"Swarm\"):
			if not has_swarm:
				## TODO
#				enemy_list.get_popup().add_separator(\"Mass Swarms\")
				has_swarm = true
			
			var swarm: String = enemy.get_slice(\"/\", 1)
	#		enemy_list.add_icon_item(Utils.editor.get_object_icon(\"EnemiesGroup\", swarm), swarm)
			enemy_list.add_icon_item(load(Const.Enemies[swarm].placeholder_sprite), swarm)
			enemy_list.set_item_metadata(enemy_list.get_item_count() - 1, \"Swarm/%s\" % swarm)
			enemy_list.get_popup().set_item_tooltip(enemy_list.get_item_count() - 1, swarm)
			
			if enemy_list.selected == 0:
				enemy_list.selected = enemy_list.get_item_count() - 1
		else:
			if not has_enemy:
#				enemy_list.get_popup().add_separator(\"Single Enemies\")
				has_enemy = true
			
			var enemy_data: Dictionary = Const.Enemies[enemy]
			enemy_list.add_icon_item(load(enemy_data.placeholder_sprite), enemy)
			enemy_list.set_item_metadata(enemy_list.get_item_count() - 1, enemy)
			enemy_list.get_popup().set_item_tooltip(enemy_list.get_item_count() - 1, enemy)

func get_data() -> Dictionary:
	var enemy: Dictionary
	enemy.name = enemy_list.get_item_metadata(enemy_list.selected)
	enemy.count = amount.value
	enemy.spawner = spawner_list.selected - 1
	enemy.delay = delay.value
	enemy.target = target.selected
	return enemy

func set_data(data: Dictionary):
	for i in enemy_list.get_item_count():
		if enemy_list.get_item_metadata(i) == data.name:
			enemy_list.selected = i
			break
	
	amount.value = data.count
	spawner_list.selected = data.spawner + 1
	spawner_list.set_meta(\"pending_select\", data.spawner + 1)
	delay.value = data.get(\"delay\", 0)
	target.selected = data.get(\"target\", 0)

func refresh_spawners():
	var selected: int = spawner_list.selected
	if spawner_list.has_meta(\"pending_select\"):
		selected = spawner_list.get_meta(\"pending_select\")
		spawner_list.remove_meta(\"pending_select\")
	
	spawner_list.clear()
	spawner_list.add_item(\"Random\")
	
	var i := 1
	for node in get_tree().get_nodes_in_group(\"wave_spawners\"):
		spawner_list.add_item(tr(\"Spawner %s\") % i)
		i += 1
	
	if selected > -1:
		spawner_list.selected = selected
	else:
		spawner_list.selected = 0

func spawner_focused(index: int) -> void:
	try_focus_spawner(index)

func popup_input(event: InputEvent):
	if event is InputEventMouseMotion:
		try_focus_spawner(get_popup_focus(spawner_list.get_popup(), event.position))

func try_focus_spawner(idx: int):
	if idx != previous_focused_spawner:
		previous_focused_spawner = idx
		if idx < 0:
			Utils.editor.get_node(\"%MinimapOverlay\").set_spawners([])
		elif idx == 0:
			Utils.editor.get_node(\"%MinimapOverlay\").set_spawners(range(get_tree().get_nodes_in_group(\"wave_spawners\").size()))
		else:
			Utils.editor.get_node(\"%MinimapOverlay\").set_spawners([idx - 1])

func get_popup_focus(popup: PopupMenu, pos: Vector2) -> int:
	if pos.x < 0 or pos.x >= popup.size.x:
		return -1

	var style = popup.get_stylebox(\"panel\")

	var ofs = style.get_offset()

	if ofs.y > pos.y:
		return -1

	var font = popup.get_font(\"font\")
	var v_separation = popup.get_constant(\"v_separation\")
	var font_h = font.get_height()

	for i in popup.get_item_count():
		ofs.y += v_separation
		var h: float = font_h
		
#		if items[i].icon.is_null()) {
#			Size2 icon_size = items[i].icon->get_size();
#			h = MAX(icon_size.height, font_h);
#		} else {
#			h = font_h;
#		}
		
		ofs.y += h
		if pos.y < ofs.y:
			return i
	
	return -1;
"

[sub_resource type="Theme" id="112"]
LineEdit/constants/minimum_spaces = 4

[sub_resource type="Theme" id="109"]
LineEdit/constants/minimum_spaces = 7

[sub_resource type="StyleBoxLine" id="86"]
color = Color(1, 1, 0, 1)
thickness = 3

[node name="WaveEdit" type="VBoxContainer" groups=["wave_items"]]
offset_right = 676.0
offset_bottom = 747.0
script = SubResource("5")

[node name="HBoxContainer" type="HBoxContainer" parent="."]
layout_mode = 2

[node name="MoveUp" type="Button" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
icon = ExtResource("2")

[node name="MoveDown" type="Button" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
icon = ExtResource("1")

[node name="ID" type="Label" parent="HBoxContainer"]
unique_name_in_owner = true
modulate = Color(1, 1, 0, 1)
layout_mode = 2
size_flags_horizontal = 3
text = "Wave %s"
horizontal_alignment = 1

[node name="DeleteWave" type="Button" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
icon = ExtResource("3")

[node name="WaveName" type="LineEdit" parent="."]
layout_mode = 2
size_flags_horizontal = 3
placeholder_text = "Wave Name"
max_length = 24

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 2
columns = 2

[node name="Label" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Wait Time"

[node name="Time" parent="GridContainer" instance=ExtResource("7")]
unique_name_in_owner = true
layout_mode = 2
script = SubResource("3")

[node name="Label3" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Repeat"

[node name="Repeat" type="SpinBox" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
theme = SubResource("107")
min_value = -1.0
max_value = 9999.0

[node name="Label2" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Multiplier"

[node name="Multiplier" type="SpinBox" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
theme = SubResource("108")
min_value = 0.01
max_value = 10.0
step = 0.01
value = 1.0
suffix = "x"

[node name="Label4" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Target"

[node name="Target" type="OptionButton" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_fonts/font = ExtResource("5")

[node name="HSeparator2" type="HSeparator" parent="."]
layout_mode = 2

[node name="Encounter" type="VBoxContainer" parent="."]
layout_mode = 2
script = SubResource("2")

[node name="GridContainer" type="GridContainer" parent="Encounter"]
layout_mode = 2
columns = 2

[node name="Enemies" type="OptionButton" parent="Encounter/GridContainer"]
layout_mode = 2
size_flags_horizontal = 3
theme_override_fonts/font = ExtResource("5")
expand_icon = true
script = ExtResource("6")
max_length = 13

[node name="HBoxContainer" type="HBoxContainer" parent="Encounter/GridContainer"]
layout_mode = 2

[node name="Label" type="Label" parent="Encounter/GridContainer/HBoxContainer"]
layout_mode = 2
text = "x"

[node name="Amount" type="SpinBox" parent="Encounter/GridContainer/HBoxContainer"]
layout_mode = 2
theme = SubResource("112")
min_value = 1.0
value = 1.0

[node name="Delete" type="Button" parent="Encounter/GridContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 10
icon = ExtResource("3")

[node name="Label2" type="Label" parent="Encounter/GridContainer"]
layout_mode = 2
text = "Spawner"

[node name="Spawner" type="OptionButton" parent="Encounter/GridContainer"]
layout_mode = 2

[node name="Label3" type="Label" parent="Encounter/GridContainer"]
layout_mode = 2
text = "Delay"

[node name="Delay" type="SpinBox" parent="Encounter/GridContainer"]
layout_mode = 2
size_flags_horizontal = 0
theme = SubResource("109")
max_value = 99.0
step = 0.01
suffix = "s"

[node name="Label" type="Label" parent="Encounter/GridContainer"]
layout_mode = 2
text = "Target"

[node name="Target" type="OptionButton" parent="Encounter/GridContainer"]
layout_mode = 2
theme_override_fonts/font = ExtResource("4")
script = ExtResource("6")

[node name="HSeparator" type="HSeparator" parent="Encounter"]
layout_mode = 2

[node name="Add" type="Button" parent="."]
layout_mode = 2
text = "+"

[node name="HSeparator" type="HSeparator" parent="."]
layout_mode = 2
theme_override_styles/separator = SubResource("86")

[connection signal="pressed" from="HBoxContainer/MoveUp" to="." method="move_up"]
[connection signal="pressed" from="HBoxContainer/MoveDown" to="." method="move_down"]
[connection signal="pressed" from="HBoxContainer/DeleteWave" to="." method="queue_free"]
[connection signal="pressed" from="Encounter/GridContainer/HBoxContainer/Delete" to="Encounter" method="queue_free"]
[connection signal="item_focused" from="Encounter/GridContainer/Spawner" to="Encounter" method="spawner_focused"]
[connection signal="pressed" from="Add" to="." method="add_encounter"]
