[gd_scene load_steps=11 format=2]

[ext_resource path="res://Nodes/Enemies/Spawners/Nest.png" type="Texture2D" id=1]
[ext_resource path="res://Nodes/Enemies/Spawners/tentacle_base.png" type="Texture2D" id=2]
[ext_resource path="res://Nodes/Enemies/Spawners/tentacle_separated.png" type="Texture2D" id=3]
[ext_resource path="res://Nodes/Enemies/Spawners/tentacle_background.png" type="Texture2D" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends BaseEnemy

var size: float
var enemy_radius: float

var enemy_list: Array

func _ready() -> void:
	max_hp = size * 10
	hp = max_hp
	$Sprite2D.scale = Vector2.ONE * (size / 512)
	$tantacles.scale = Vector2.ONE * (size / 512) * 2.0
	$Area2D/CollisionShape2D.shape.radius = size * 0.5
	enemy_radius = pow(size * 0.5 + 200, 2)

func add_enemy(enemy: BaseEnemy):
	enemy_list.append(enemy)
	enemy.connect(\"died\", Callable(self, \"remove_enemy\").bind(enemy))

func remove_enemy(enemy: BaseEnemy):
	enemy_list.erase(enemy)

func _physics_process(delta: float) -> void:
	for enemy in enemy_list:
		if enemy is StateEnemy:
			if enemy.validate_target():
				if not enemy.is_retreating and enemy.is_inside_tree() and enemy.target.global_position.distance_squared_to(global_position) > enemy_radius:
					enemy.set_state(\"retreat_to_base\", {base = self})
"

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
uniform vec2 playerpos=vec2(50.0,1800.0);
uniform mat4 global_transform;
varying vec2 global_position;
void vertex()
{
	mat4 glo=global_transform;
	mat2 ddd = mat2(glo);
    global_position=(EXTRA_MATRIX *glo * vec4(VERTEX, 0.0, 1.0)).xy;
	//VERTEX = (EXTRA_MATRIX * (WORLD_MATRIX * vec4(VERTEX, 1.0, 1.0))).xy;
}

void fragment()
{

    COLOR=texture(TEXTURE,UV+sin(TIME*4.0+UV*16.0)*0.009);
    COLOR.a= COLOR.a*clamp(pow(distance(global_position,playerpos)/90.0,1.5),0.4,1.0);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/playerpos = Vector2( 297.683, 2095.15 )
shader_param/global_transform = Transform2D( 0.5, 0, 0, 0.5, 43.2725, 1672.41 )

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;
uniform vec2 playerpos=vec2(50.0,1800.0);
uniform mat4 global_transform;
varying vec2 global_position;
void vertex()
{
	mat4 glo=global_transform;
	mat2 ddd = mat2(glo);
    global_position=(EXTRA_MATRIX *glo * vec4(VERTEX, 0.0, 1.0)).xy;
	//VERTEX = (EXTRA_MATRIX * (WORLD_MATRIX * vec4(VERTEX, 1.0, 1.0))).xy;
}

void fragment()
{

    COLOR=texture(TEXTURE,UV+sin(TIME*2.0+UV*8.0)*0.009);
    COLOR.a= COLOR.a*clamp(pow(distance(global_position,playerpos)/90.0,1.5),0.4,1.0);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/playerpos = Vector2( 297.683, 2095.15 )
shader_param/global_transform = Transform2D( 0.5, 0, 0, 0.5, 43.2725, 1672.41 )

[sub_resource type="CircleShape2D" id=6]
resource_local_to_scene = true

[node name="Nest" type="Node2D"]
script = SubResource( 1 )
tracking_enabled = false

[node name="Sprite2D" type="Sprite2D" parent="."]
visible = false
texture = ExtResource( 1 )

[node name="tantacles" type="Node2D" parent="."]

[node name="tentacle_background" type="Sprite2D" parent="tantacles"]
position = Vector2( -1, 0 )
scale = Vector2( 2, 2 )
texture = ExtResource( 4 )

[node name="tentacle_separated" type="Sprite2D" parent="tantacles"]
material = SubResource( 3 )
position = Vector2( -1, 0 )
scale = Vector2( 2, 2 )
texture = ExtResource( 3 )

[node name="tentacle_base" type="Sprite2D" parent="tantacles"]
material = SubResource( 5 )
position = Vector2( -1, 0 )
scale = Vector2( 2, 2 )
texture = ExtResource( 2 )

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 6 )
