[gd_scene load_steps=18 format=2]

[ext_resource path="res://Nodes/Player/Weapons/Throwable/Mine_1_frame.png" type="Texture2D" id=1]
[ext_resource path="res://Nodes/Player/Weapons/Throwable/Mine_1_frame_line.png" type="Texture2D" id=2]
[ext_resource path="res://SFX/Weapons/beep_03.wav" type="AudioStream" id=3]
[ext_resource path="res://SFX/Weapons/beep_02.wav" type="AudioStream" id=4]
[ext_resource path="res://Nodes/Map/ZIndexer.tscn" type="PackedScene" id=5]
[ext_resource path="res://Nodes/Lights/Textures/SmoothCircle.png" type="Texture2D" id=6]

[sub_resource type="GDScript" id=4]
script/source = "extends PixelMapRigidBody

@onready var animator = $AnimationPlayer as AnimationPlayer

var is_thrown := false


func _ready():
	
	add_to_group(\"repair_kit_pickable\")
	rotation = randf_range(0, TAU)
	Utils.set_collisions($EnemyDetector, Const.ENEMY_COLLISION_LAYER, Utils.ACTIVE)
	Utils.set_collisions($EnemyExitDetector, Const.ENEMY_COLLISION_LAYER, Utils.ACTIVE)
	Utils.init_player_projectile($EnemyExitDetector, $EnemyExitDetector, {damage = 1, no_flying = true, keep = true, damage_timeout=20000})
	if is_thrown:
		animator.play(\"Place\")
	else:
		animator.seek(randf_range(0,animator.current_animation_length))

func _integrate_forces(state: PhysicsDirectBodyState2D) -> void:
	linear_velocity *= 0.9
	pixel_map_physics(state,Utils.walkable_collision_mask)

func set_data(value) -> void:
	is_thrown = true

var triggered: bool
var exploded: bool

func explode():
	if exploded:
		return
	exploded = true
	
	var explosion := Const.EXPLOSION.instantiate() as Node2D
	explosion.scale = Vector2.ONE * 0.2
	explosion.position = position
	get_parent().call_deferred(\"add_child\", explosion)
	get_tree().create_timer(0.3).connect(\"timeout\", Callable(self, \"queue_free\"))

func enemy_detected(area: Area2D) -> void:
	if triggered or not area.has_meta(\"enemy_hitbox\"):
		return
	on_hit()


func on_hit():
	if triggered:
		return
	triggered = true
	animator.play(\"Explode\",-1,2.0)
	animator.connect(\"animation_finished\", Callable(self, \"explode2\"))

func explode2(dupa):
	explode()

func _on_enemy_exit(area):
	if not area.has_meta(\"enemy_hitbox\"):
		return
	explode()
"

[sub_resource type="CircleShape2D" id=1]
radius = 6.0

[sub_resource type="CircleShape2D" id=3]
radius = 16.1322

[sub_resource type="GDScript" id=11]
script/source = "extends Area2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

func on_hit():
	get_parent().on_hit()

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="CircleShape2D" id=8]
radius = 6.46237

[sub_resource type="AudioStreamGenerator" id=9]
mix_rate = 44106.0
buffer_length = 3.02

[sub_resource type="AudioStreamRandomizer" id=10]
audio_stream = SubResource( 9 )

[sub_resource type="Animation" id=6]
resource_name = "Explode"
length = 0.5
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2D/Mine_1_frame_line:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( -0.55, -0.45, -0.25, -0.15, 0, 0.1, 0.2, 0.3, 0.35, 0.4, 0.45, 0.5 ),
"transitions": PackedFloat32Array( -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 5, 1, 1, 1 ), Color( 0, 0, 0, 1 ), Color( 5, 1, 1, 1 ), Color( 0, 0, 0, 1 ), Color( 5, 1, 1, 1 ), Color( 0, 0, 0, 1 ), Color( 5, 1, 1, 1 ), Color( 0, 0, 0, 1 ), Color( 5, 1, 1, 1 ), Color( 0, 0, 0, 1 ), Color( 5, 1, 1, 1 ) ]
}
tracks/1/type = "audio"
tracks/1/path = NodePath("AudioStreamPlayer2D")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"clips": [ {
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource( 3 )
}, {
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource( 3 )
}, {
"end_offset": 0.0,
"start_offset": 0.0,
"stream": SubResource( 10 )
} ],
"times": PackedFloat32Array( 0, 0.3, 0.75 )
}

[sub_resource type="Animation" id=2]
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2D/Mine_1_frame_line:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 2.4, 5 ),
"transitions": PackedFloat32Array( -2, -2, -2 ),
"update": 0,
"values": [ Color( 1, 5, 1, 1 ), Color( 0, 1, 0, 1 ), Color( 1, 5, 1, 1 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "Place"
length = 1.5
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2D/Mine_1_frame_line:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 1.1, 1.5 ),
"transitions": PackedFloat32Array( -2, -2, -2 ),
"update": 0,
"values": [ Color( 1, 1, 5, 1 ), Color( 1, 1, 5, 1 ), Color( 1, 5, 1, 1 ) ]
}
tracks/1/type = "audio"
tracks/1/path = NodePath("AudioStreamPlayer2D")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"clips": [ {
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource( 4 )
} ],
"times": PackedFloat32Array( 1.1 )
}

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite2D/Mine_1_frame_line:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ Color( 1, 1, 5, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("AudioStreamPlayer2D:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AudioStreamPlayer2D:pitch_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 1.0 ]
}

[node name="Mine" type="PixelMapRigidBody"]
z_index = 50
z_as_relative = false
collision_layer = 2
collision_mask = 2
gravity_scale = 0.0
angular_damp = 10.0
radius = 4
pixel_map_bounce = 0.4
script = SubResource( 4 )

[node name="shadow" type="Sprite2D" parent="."]
modulate = Color( 0, 0, 0, 1 )
scale = Vector2( 0.08, 0.08 )
texture = ExtResource( 6 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="EnemyDetector" type="Area2D" parent="."]
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="EnemyDetector"]
shape = SubResource( 3 )

[node name="EnemyExitDetector" type="Area2D" parent="."]
monitorable = false
script = SubResource( 11 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="EnemyExitDetector"]
shape = SubResource( 8 )

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2( 0.05, 0.05 )
texture = ExtResource( 1 )

[node name="Mine_1_frame_line" type="Sprite2D" parent="Sprite2D"]
modulate = Color( 1, 1, 5, 1 )
texture = ExtResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Mine"
anims/Explode = SubResource( 6 )
anims/Mine = SubResource( 2 )
anims/Place = SubResource( 7 )
anims/RESET = SubResource( 5 )
next/Place = "Mine"

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = SubResource( 10 )
volume_db = -20.0
max_distance = 500.0
attenuation = 2.0
bus = "SFX"

[node name="ZIndexer" parent="." instance=ExtResource( 5 )]
z_index = 50

[connection signal="area_entered" from="EnemyDetector" to="." method="enemy_detected" flags=3]
[connection signal="area_exited" from="EnemyExitDetector" to="." method="_on_enemy_exit"]
