[gd_scene load_steps=21 format=2]

[ext_resource path="res://Nodes/Buildings/Reactor/Smoke_1_color.png" type="Texture2D" id=1]
[ext_resource path="res://Nodes/Player/Weapons/Ranged/FlameEffect.gd" type="Script" id=2]
[ext_resource path="res://Nodes/Player/Weapons/Ranged/FlameEffectSmall.gd" type="Script" id=3]
[ext_resource path="res://Nodes/Player/Weapons/PlayerSprite/Flame_trail_f.png" type="Texture2D" id=4]
[ext_resource path="res://Nodes/Map/ZIndexer.tscn" type="PackedScene" id=5]

[sub_resource type="CanvasItemMaterial" id=39]
particles_animation = true
particles_anim_h_frames = 5
particles_anim_v_frames = 3
particles_anim_loop = true

[sub_resource type="Shader" id=46]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.rc's ParticleProcessMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform vec3 emission_box_extents;
uniform vec4 color_value : source_color;
uniform int trail_divisor;
uniform vec3 gravity;
uniform sampler2D color_ramp;
uniform sampler2D scale_texture;


uniform bool on_stand=false;

// Collisions
uniform sampler2D map_texture;
const float material_collision[33] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
									1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
									1.0, 1.0, 1.0, 1.0, 0.0, 0.0/* 25 empty*/, 1.0, 1.0, 1.0, 0.0, 
									0.0,0.0,1.0};
const float material_collision_above[33] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 
									1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
									0.0, 0.0, 0.0, 0.0, 0.0, 0.0/* 25 empty*/, 1.0, 1.0, 1.0, 0.0, 
									0.0,0.0,1.0};


float check_position(vec2 pos) {
	vec4 smp=texelFetch(map_texture, ivec2(pos), 0);
//	vec4 smp=textureLod(map_texture, pos, 0.0);
	if (!on_stand)
		return material_collision[min(32,int(round(smp.g*255.0)))];
	else
		return material_collision_above[min(32,int(round(smp.g*255.0)))];
}

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void process() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
		uint alt_restart_seed = hash(base_number + uint(301184) + RANDOM_SEED);
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		{
			float angle1_rad = rand_from_seed_m1_p1(alt_restart_seed) * spread_rad;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_restart_seed), initial_linear_velocity_random);
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_restart_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0) * emission_box_extents;
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		
		
		
		
		// collisions
		vec2 map_inverse_size = 1.0 / vec2(textureSize(map_texture, 0));
		float sample = check_position(TRANSFORM[3].xy);
		if (sample > 0.0) {
				VELOCITY = vec3(0.0, 0.0, 0.0);
		}
		
		
		
		
		
		
		
		
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + tv * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = textureLod(scale_texture, vec2(tv, 0.0), 0.0).r;
	float tex_hue_variation = 0.0;
	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * textureLod(color_ramp, vec2(tv, 0.0), 0.0) * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="Gradient" id=40]
offsets = PackedFloat32Array( 0.158397, 0.468333, 0.641667, 0.88, 1 )
colors = PackedColorArray( 0.588235, 0.588235, 5, 1, 2, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 )

[sub_resource type="GradientTexture2D" id=41]
gradient = SubResource( 40 )
width = 512

[sub_resource type="Curve" id=42]
_data = [ Vector2( 0, 0.193251 ), 0.0, 1.28549, 0, 0, Vector2( 0.738779, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), -3.69212, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=43]
width = 256
curve = SubResource( 42 )

[sub_resource type="ShaderMaterial" id=47]
resource_local_to_scene = true
shader = SubResource( 46 )
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/spread = 5.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 70.0
shader_param/initial_angle = 720.0
shader_param/angular_velocity = 36.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = 0.0
shader_param/radial_accel = 0.0
shader_param/tangent_accel = 0.0
shader_param/damping = 40.0
shader_param/scale = 0.1
shader_param/hue_variation = 0.0
shader_param/anim_speed = 0.0
shader_param/anim_offset = 1.0
shader_param/initial_linear_velocity_random = 0.12
shader_param/initial_angle_random = 1.0
shader_param/angular_velocity_random = 1.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.0
shader_param/scale_random = 0.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 1.0
shader_param/lifetime_randomness = 0.0
shader_param/emission_box_extents = Vector3( 0.5, 0.5, 1 )
shader_param/color_value = Color( 1, 1, 1, 0.482353 )
shader_param/trail_divisor = 1
shader_param/gravity = Vector3( 0, -1e-06, 0 )
shader_param/on_stand = false
shader_param/color_ramp = SubResource( 41 )
shader_param/scale_texture = SubResource( 43 )

[sub_resource type="CanvasItemMaterial" id=23]
blend_mode = 1
particles_animation = true
particles_anim_h_frames = 5
particles_anim_v_frames = 3
particles_anim_loop = true

[sub_resource type="Shader" id=36]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.beta's ParticleProcessMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform vec3 emission_box_extents;
uniform vec4 color_value : source_color;
uniform int trail_divisor;
uniform vec3 gravity;
uniform sampler2D color_ramp;
uniform sampler2D scale_texture;

uniform bool on_stand=false;

// Collisions
uniform sampler2D map_texture;
const float material_collision[33] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
									1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
									1.0, 1.0, 1.0, 1.0, 0.0, 0.0/* 25 empty*/, 1.0, 1.0, 1.0, 0.0, 
									0.0,0.0,1.0};
const float material_collision_above[33] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 
									1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
									0.0, 0.0, 0.0, 0.0, 0.0, 0.0/* 25 empty*/, 1.0, 1.0, 1.0, 0.0, 
									0.0,0.0,1.0};


float check_position(vec2 pos) {
	vec4 smp=texelFetch(map_texture, ivec2(pos), 0);
//	vec4 smp=textureLod(map_texture, pos, 0.0);
	if (!on_stand)
		return material_collision[min(32,int(round(smp.g*255.0)))];
	else
		return material_collision_above[min(32,int(round(smp.g*255.0)))];
}

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void process() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
		uint alt_restart_seed = hash(base_number + uint(301184) + RANDOM_SEED);
		uint alt_restart_seed_2 = hash(base_number + uint(451776*190) + RANDOM_SEED);
		uint alt_restart_seed_3 = hash(base_number + uint(301184*20) + RANDOM_SEED);
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		float angle1_rad = 0.0;
		angle1_rad = rand_from_seed_m1_p1(alt_restart_seed) * spread_rad;
		{
			float angle1_rad_2 = rand_from_seed_m1_p1(alt_restart_seed_2) * spread_rad;
			float angle1_rad_3 = rand_from_seed_m1_p1(alt_restart_seed_3) * spread_rad;
			angle1_rad = (angle1_rad + angle1_rad_2 + angle1_rad_3)/3.0;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_restart_seed), initial_linear_velocity_random);
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_restart_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0) * emission_box_extents;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		
		
				
		// collisions
		vec2 map_inverse_size = 1.0 / vec2(textureSize(map_texture, 0));
		float sample = check_position(TRANSFORM[3].xy);
		if (sample > 0.0) {
				VELOCITY = vec3(0.0, 0.0, 0.0);
		}
		
		
		
		
		
		
		
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + tv * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = textureLod(scale_texture, vec2(tv, 0.0), 0.0).r;
	float tex_hue_variation = 0.0;
	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * textureLod(color_ramp, vec2(tv, 0.0), 0.0) * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="Gradient" id=32]
offsets = PackedFloat32Array( 0, 0.118321, 0.245, 0.385, 1 )
colors = PackedColorArray( 0.0196078, 0.0196078, 1, 0, 0.196078, 0.196078, 10, 1, 10, 10, 1, 1, 10, 10, 1, 0.501961, 0, 0, 0, 0 )

[sub_resource type="GradientTexture2D" id=33]
gradient = SubResource( 32 )

[sub_resource type="Curve" id=34]
_data = [ Vector2( 0, 0.0950919 ), 0.0, 1.26871, 0, 0, Vector2( 1, 0.223926 ), -0.934612, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=35]
width = 256
curve = SubResource( 34 )

[sub_resource type="ShaderMaterial" id=37]
resource_local_to_scene = true
shader = SubResource( 36 )
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/spread = 5.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 80.0
shader_param/initial_angle = 720.0
shader_param/angular_velocity = 36.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = 0.0
shader_param/radial_accel = 0.0
shader_param/tangent_accel = 0.0
shader_param/damping = 50.0
shader_param/scale = 0.1
shader_param/hue_variation = 0.0
shader_param/anim_speed = 3.0
shader_param/anim_offset = 1.0
shader_param/initial_linear_velocity_random = 0.1
shader_param/initial_angle_random = 1.0
shader_param/angular_velocity_random = 1.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.0
shader_param/scale_random = 0.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 1.0
shader_param/lifetime_randomness = 0.0
shader_param/emission_box_extents = Vector3( 2, 0.1, 0.1 )
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/trail_divisor = 1
shader_param/gravity = Vector3( 0, -1e-06, 0 )
shader_param/on_stand = false
shader_param/color_ramp = SubResource( 33 )
shader_param/scale_texture = SubResource( 35 )

[sub_resource type="Curve" id=5]
_data = [ Vector2( 0.00448833, 1 ), 0.0, 2.14794, 0, 0, Vector2( 1, 1 ), 0.24584, 0.0, 0, 0 ]

[node name="FlameEffect" type="Node2D"]
script = ExtResource( 2 )

[node name="Flame_smoke" type="GPUParticles2D" parent="."]
material = SubResource( 39 )
z_index = 810
z_as_relative = false
emitting = false
amount = 128
lifetime = 2.0
local_coords = false
draw_order = 1
process_material = SubResource( 47 )
texture = ExtResource( 1 )

[node name="ZIndexer" parent="Flame_smoke" instance=ExtResource( 5 )]
z_index = 800
offset = 10

[node name="Flame_core" type="GPUParticles2D" parent="."]
material = SubResource( 23 )
z_index = 810
z_as_relative = false
emitting = false
amount = 256
local_coords = false
draw_order = 1
process_material = SubResource( 37 )
texture = ExtResource( 1 )

[node name="ZIndexer" parent="Flame_core" instance=ExtResource( 5 )]
z_index = 800
offset = 10

[node name="Smoketrail" type="Line2D" parent="."]
modulate = Color( 1, 1, 1, 0.627451 )
scale = Vector2( 1, 0.75 )
z_index = 1
points = PackedVector2Array( 0, 0, 40, 0, 80, 0, 120, 0, 160, 0 )
width = 60.0
width_curve = SubResource( 5 )
default_color = Color( 1, 1, 1, 1 )
texture = ExtResource( 4 )
texture_mode = 2
round_precision = 3
script = ExtResource( 3 )
max_points = 5.0
point_length = 30.0
point_lag = 0.8
point_offset = Vector2( -11, 0 )
