[gd_scene load_steps=14 format=2]

[ext_resource path="res://Nodes/Buildings/Petshop/Sparks2.png" type="Texture2D" id=1]
[ext_resource path="res://Nodes/Map/ZIndexer.tscn" type="PackedScene" id=2]
[ext_resource path="res://Nodes/Lights/LightSprite.tscn" type="PackedScene" id=3]
[ext_resource path="res://Resources/Textures/gradient_smooth.png" type="Texture2D" id=4]

[sub_resource type="GDScript" id=23]
script/source = "extends Area2D

@export var speed: float

@onready var physics: PixelMapPhysics = Utils.game.map.physics
#var collider= null
var weapon_id: int
var dir: Vector2
var player: Player
@export var max_distance:float =INF
var distance_traveled=0.0
var minimal_distance_to_flip_z_index: = 15.0

var life_time: float = 0.5
var dead = false
@onready var rail = $\"%Rail\"
var end_point:Vector2
@onready var collider = $CollisionShape2D
@onready var cpu_particles_2d = $CPUParticles2D
@onready var light_sprite = $LightSprite

func _ready() -> void:
#	collider=get_node_or_null(\"CollisionShape2D\")
	dir = Vector2.RIGHT.rotated(rotation)

	if weapon_id:
		Player.init_weapon(self, self, weapon_id)
	else:
		Utils.init_player_projectile(self, self, get_damage_data())
	get_meta(\"data\").velocity = dir * speed
	Utils.play_sample(Utils.random_sound(\"res://SFX/Weapons/gun_pistol_shot_silenced\"), self)
	end_point = Vector2.ZERO
	rail.points[0] = Vector2.ZERO 
	rail.points[1] = Vector2.ZERO 
	cpu_particles_2d.emission_rect_extents.x = 1
	cpu_particles_2d.emitting = true
	rail.material = rail.material.duplicate()
	collider.shape = collider.shape.duplicate()

func _physics_process(delta: float) -> void:
	life_time += delta*5
	light_sprite.modulate.a = 1.0 - (life_time/5.0)
	if life_time >= 2:
		if dead:
			if life_time >= 5:
				queue_free()
		else:
			dead = true
			collider.disabled = true
	else:
		rail.material.set_shader_parameter(\"life\",life_time)
		
	if dead:
		return
	
	var ray := Utils.game.map.pixel_map.rayCastQTDistance(to_global(rail.points[1]),  dir, speed * delta, Player.get_weapon_mask(get_meta(\"data\")))
	if ray:
		rail.points[1] = to_local(ray.hit_position)
	else:
		rail.points[1] += Vector2.RIGHT * speed * delta
	
	cpu_particles_2d.position = rail.points[1]* 0.5
	cpu_particles_2d.emission_rect_extents.x = rail.points[1].x * 0.5
	collider.position = rail.points[1] * 0.5
	collider.shape.extents.x = rail.points[1].x * 0.5
	light_sprite.scale.x = rail.points[1].x * 0.5 / 64.0
	light_sprite.position = rail.points[1] * 0.5
func set_player(p: Player):
	player = p

func on_hit():
	var data=get_meta(\"data\")

func get_damage_data() -> Dictionary:
	return {}














#func destroy(blood: bool):
#	get_meta(\"data\").destroyed = true
#	var spark: Node2D
#	if blood:
#		spark = preload(\"res://Nodes/Effects/Impact/BulletBlood.tscn\").instance()
#		spark.rotation = rotation
#	else:
#		spark = preload(\"res://Nodes/Effects/Impact/BulletSpark.tscn\").instance()
#		var normal = physics.get_collision_normal(position,4)
#		if normal and normal.normal_valid:
#			spark.rotation = dir.bounce(normal.normal).angle()
#		else:
#			spark.rotation = (-dir).angle()
#	spark.position = position
#	get_parent().add_child(spark)
#	if collider: #todo wyrzucic bo tak nie bylo
#		collider.call_deferred(\"set_disabled\",true)
#	set_physics_process(false)
"

[sub_resource type="RectangleShape2D" id=22]
extents = Vector2( 0, 1 )

[sub_resource type="CanvasItemMaterial" id=21]
particles_animation = true
particles_anim_h_frames = 8
particles_anim_v_frames = 4
particles_anim_loop = false

[sub_resource type="Curve" id=13]
_data = [ Vector2( 0, 1 ), 0.0, -1.0, 0, 1, Vector2( 1, 0 ), -1.0, 0.0, 1, 0 ]

[sub_resource type="Gradient" id=14]
offsets = PackedFloat32Array( 0, 0.536337, 1 )
colors = PackedColorArray( 1, 1, 1, 1, 3, 2, 1, 1, 3, 2, 1, 0 )

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;

uniform sampler2D noise;
uniform float ray_length = 300;
uniform float noise_scale = 5;

uniform float life = 0.0;

uniform vec4 ray_color :source_color = vec4(1.0,0.0,0.0,1.0);

float cubicPulse( float c, float w, float x ){
    x = abs(x - c);
    if( x>w ) return 0.0;
    x /= w;
    return 1.0 - x*x*(3.0-2.0*x);
}

void fragment() {
	float pulse_life = sin(life*life);
	float noise_tex = texture(noise, vec2(SCREEN_UV.x*noise_scale*0.2, SCREEN_UV.y*noise_scale*0.2)).r;
	COLOR.a = 2.0 * noise_tex * (cubicPulse(0.5,0.5*pulse_life,UV.y) + cubicPulse(0.5,0.5*pulse_life,UV.y)) * ray_color.a;
//	COLOR.a = (max(0.0, snoise( vec3( SCREEN_UV*50.0, TIME*2.0 ) ))*0.5 + 0.3) * (1.0-UV.x);
	COLOR.rgb = ray_color.rgb;
}
"

[sub_resource type="FastNoiseLite" id=17]
period = 8.5
persistence = 0.0
lacunarity = 0.1

[sub_resource type="NoiseTexture" id=16]
width = 128
height = 128
seamless = true
bump_strength = 13.5
noise = SubResource( 17 )

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/ray_length = 300.0
shader_param/noise_scale = 15.0
shader_param/life = 0.0
shader_param/ray_color = Color( 3, 2, 1, 1 )
shader_param/noise = SubResource( 16 )

[node name="Rail" type="Area2D"]
z_index = 700
z_as_relative = false
script = SubResource( 23 )
speed = 2000.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 22 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="."]
material = SubResource( 21 )
emitting = false
amount = 128
lifetime = 0.5
one_shot = true
lifetime_randomness = 1.0
local_coords = false
texture = ExtResource( 1 )
emission_shape = 2
emission_rect_extents = Vector2( 100, 1 )
flag_align_y = true
spread = 180.0
gravity = Vector2( 0, 0 )
initial_velocity = 50.0
initial_velocity_random = 1.0
angular_velocity = 720.0
angular_velocity_random = 1.0
scale_amount = 0.05
scale_amount_random = 0.01
scale_amount_curve = SubResource( 13 )
color_ramp = SubResource( 14 )
anim_speed = 0.2
anim_offset = 1.0
anim_offset_random = 1.0

[node name="ZIndexer" parent="." instance=ExtResource( 2 )]
z_index = 700

[node name="Rail" type="Line2D" parent="."]
unique_name_in_owner = true
show_behind_parent = true
material = SubResource( 19 )
z_index = 700
z_as_relative = false
points = PackedVector2Array( 0, 0, 100, 0 )
width = 1.0
default_color = Color( 1, 1, 1, 1 )
texture_mode = 2
begin_cap_mode = 2
end_cap_mode = 2

[node name="ZIndexer" parent="Rail" instance=ExtResource( 2 )]
z_index = 700

[node name="LightSprite" parent="." instance=ExtResource( 3 )]
scale = Vector2( 1, 2 )
texture = ExtResource( 4 )
follow_rotation = true
