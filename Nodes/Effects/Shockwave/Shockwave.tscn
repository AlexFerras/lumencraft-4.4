[gd_scene load_steps=7 format=2]

[ext_resource path="res://Resources/Textures/1px.png" type="Texture2D" id=1]
[ext_resource path="res://Resources/Textures/cloud_noise_rgba.png" type="Texture2D" id=2]


[sub_resource type="Shader" id=1]
code = "
shader_type canvas_item;
uniform float tail_speed = 200.0; // mnoznik jak szybko schodzi
uniform float head_speed = 600.0; // mnoznik jak szybko leci
uniform float time_offset =0.f;
uniform float shockfactor=10.0;
uniform float stoper_smooth=4.0;
uniform float color_range=0.2;
uniform float color_power=2.0;
uniform float color_deformation=2.0;
uniform float noise_strength=1.0;
uniform float noise_tiling=4.0;
uniform vec4 color=vec4(1.0,1.0,1.0,1.0);
uniform bool design_mode=false;
uniform mat4 global_transform;
uniform vec2 camera_zoom;
uniform sampler2D noise_texture;

float map(float value, float low1, float high1, float low2, float high2)
{
	return low2 + (value - low1) * (high2 - low2) / (high1 - low1);
}




varying vec2 world_pos;
varying vec2 shockcenter;
varying float radius;


void vertex() {
	world_pos=(global_transform * vec4(VERTEX, 0.0, 1.0)).xy;
	shockcenter=(global_transform * vec4(0.0,0.0, 1.0, 1.0)).xy;
	radius=global_transform[0][0]*0.5;
}



void fragment()
{

	vec2 position=(world_pos);

	float stoper=1.0-clamp(pow(distance(position,shockcenter)/radius,stoper_smooth),0.0,1.0);

	float startradius = time_offset*tail_speed; // mnoznik jak szybko schodzi
	float size = time_offset*head_speed; // mnoznik jak szybko leci
	if(design_mode)
	{
		startradius = mod(TIME ,2.0) *tail_speed; // mnoznik jak szybko schodzi
		size = mod(TIME , 2.0) *head_speed; // mnoznik jak szybko leci
	}
	float PI =3.141592653589;

	vec2 shiftedUV=vec2(0.0);
	vec3 noise=texture(noise_texture,(UV+shockcenter*0.005)*noise_tiling*radius*0.001).xyz;
	float m_distance = distance(position,shockcenter)+0.0;
	if( m_distance > startradius && m_distance < (startradius+size))
	{
		float sin_dist = sin((m_distance -startradius)/size* PI )*shockfactor*stoper;
		shiftedUV= ( normalize(position-shockcenter)*sin_dist );
	}
	
	float falloff=pow(max(0.0,(m_distance*noise.x-(startradius*noise.y+size))*0.05),1.0);
	float front=clamp(pow(max(1.0-abs((startradius*(noise.x-0.5)*color_deformation+size)-m_distance)*0.02*color_range,0.0),color_power),0.0,1.0);
	float strength=max((front-falloff),0.0);
	
	COLOR = texture(SCREEN_TEXTURE,SCREEN_UV+shiftedUV*0.001*camera_zoom+(noise.x-0.5)*noise_strength*stoper*strength);
	COLOR.rgb+=strength*color.rgb*color.a*pow(noise.g,1.0)*stoper;

}
	





"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/tail_speed = 150.0
shader_param/head_speed = 600.0
shader_param/time_offset = 0.0
shader_param/shockfactor = 10.0
shader_param/stoper_smooth = 4.494
shader_param/color_range = 0.182
shader_param/color_power = 7.649
shader_param/color_deformation = 2.0
shader_param/noise_strength = 0.15
shader_param/noise_tiling = 3.622
shader_param/color = Plane( 1, 0.844, 0.759, 1 )
shader_param/design_mode = false
shader_param/global_transform = Transform2D( 500, 0, 0, 500, 0, 0 )
shader_param/camera_zoom = Vector2( 0.793701, 0.793701 )
shader_param/noise_texture = ExtResource( 2 )

[sub_resource type="GDScript" id=3]
script/source = "extends Sprite2D
tool

func _process(delta):
	material.set_shader_parameter(\"global_transform\", get_global_transform())
	material.set_shader_parameter(\"camera_zoom\", get_viewport_transform().get_scale())
"

[sub_resource type="Animation" id=4]
resource_name = "Shockwave"
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/time_offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 1 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[node name="Shockwave" type="Sprite2D"]
material = SubResource( 2 )
scale = Vector2( 500, 500 )
texture = ExtResource( 1 )
script = SubResource( 3 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Shockwave"
anims/Shockwave = SubResource( 4 )
