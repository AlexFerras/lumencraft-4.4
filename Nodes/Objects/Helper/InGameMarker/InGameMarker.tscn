[gd_scene load_steps=9 format=2]

[ext_resource path="res://Nodes/Objects/Helper/InGameMarker/MarkerArrow.png" type="Texture2D" id=2]
[ext_resource path="res://Resources/Textures/location.png" type="Texture2D" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

const MARGIN = 640

@onready var indicator := $Indicator as Node2D
@onready var indicator_arrow := $Indicator/Sprite2D as Node2D
@onready var point := $Sprite2D as Node2D

func _ready() -> void:
	set_physics_process(is_visible_in_tree())

func _physics_process(delta: float) -> void:
	if is_nan(Utils.game.camera.get_camera_screen_center().y):
		return
	var center := Utils.game.camera.get_camera_screen_center()
#	var screen_size := (Const.RESOLUTION * 0.5 - Vector2(MARGIN, MARGIN)) * Utils.game.camera.zoom
	var screen_size := (Utils.game.resolution_of_visible_rect * 0.5 - Vector2(MARGIN, MARGIN)) * Utils.game.camera.zoom
	indicator.global_position.x = clamp(global_position.x, center.x - screen_size.x, center.x + screen_size.x)
	indicator.global_position.y = clamp(global_position.y, center.y - screen_size.y, center.y + screen_size.y)
	indicator_arrow.rotation = indicator.global_position.direction_to(global_position).angle()
	indicator_arrow.visible = indicator.global_position.distance_squared_to(global_position) > 600
	point.visible = not indicator_arrow.visible

func _notification(what: int) -> void:
	if what == NOTIFICATION_VISIBILITY_CHANGED:
		set_physics_process(is_visible_in_tree())
"

[sub_resource type="Animation" id=5]
resource_name = "Prominence"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 0.7 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 1,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="GDScript" id=4]
script/source = "extends AnimationPlayer

func _ready() -> void:
	assert(get_parent() is CanvasItem)
	get_parent().connect(\"visibility_changed\", Callable(self, \"update_process\"))
	update_process()

func update_process():
	set_process_internal(get_parent().is_visible_in_tree())
"

[sub_resource type="Animation" id=2]
resource_name = "Prominence"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PackedFloat32Array( 0, 1 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ 0.0, 90.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0, 0.5, 1 ),
"transitions": PackedFloat32Array( 2, 0.5, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[node name="InGameMarker" type="Node2D"]
modulate = Color( 2, 2, 2, 1 )
z_index = 4095
script = SubResource( 1 )

[node name="Indicator" type="Node2D" parent="."]
scale = Vector2( 0.2, 0.2 )

[node name="Sprite2D" type="Sprite2D" parent="Indicator"]
scale = Vector2( 0.6, 0.6 )
texture = ExtResource( 2 )
offset = Vector2( 128, 0 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Indicator/Sprite2D"]
autoplay = "Prominence"
anims/Prominence = SubResource( 5 )
anims/RESET = SubResource( 6 )
script = SubResource( 4 )

[node name="Sprite2D" type="Node2D" parent="."]
self_modulate = Color( 1, 1, 1, 0 )
scale = Vector2( 0.1, 0.1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite2D"]
autoplay = "Prominence"
anims/Prominence = SubResource( 2 )
anims/RESET = SubResource( 3 )
script = SubResource( 4 )

[node name="Location" type="Sprite2D" parent="Sprite2D"]
modulate = Color( 1, 0.407843, 0, 1 )
position = Vector2( 0, -50 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 3 )
