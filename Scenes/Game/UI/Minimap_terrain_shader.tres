[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://cyxgomprhyy0m"]

[sub_resource type="Shader" id="20"]
code = "shader_type canvas_item;
uniform float zoom;
uniform vec2 rect_size;
uniform vec2 screen_center_position;
uniform vec4 terrain_color : source_color = vec4(0.99, 0.49, 0.09,1.0);
uniform vec4 scrap_materials_color : source_color = vec4(0.7, 0.2, 0.1, 1.0);
uniform vec4 lumen_material_color : source_color = vec4(1.0, 0.5, 0.9, 1.0);
uniform vec4 transparent_color : source_color = vec4(0.99, 0.49, 0.09, 0.5);
uniform vec4 dead_lumen_material_color  : source_color= vec4(0.4, 0.8, 1.0, 1.0);
uniform vec4 building_color : source_color = vec4(0.4, 0.8, 1.0, 1.0);
uniform vec4 lava_color : source_color = vec4(1.1, 0.8, 0.0, 1.0);
uniform vec4 bedrock_color : source_color = vec4(0.0, 0.0, 0.0, 1.0);

bool is_equal_approx(float x, float y) {
	return abs(x - y) < 0.0001;
}

const int material_color_index_array[33] = {0, 0, 7, 1, 1, 1, 0, 0, 0, 0, 
											0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
											0, 0, 0, 0, 4, 4, 3, 2, 0, 0, 
											6, 0, 5};

void fragment() {
	vec2 tex_size = vec2(textureSize(TEXTURE, 0));
	vec4 pixel_map_data = texelFetch(TEXTURE, ivec2(int(UV.x*tex_size.x), int(UV.y*tex_size.y)), 0);
	//vec4 pixel_map_data = textureLod(TEXTURE, UV, 0);
	int material_type = int(pixel_map_data.g * 255.0 + 0.5);
	vec4 colors[8] = {terrain_color, scrap_materials_color, lumen_material_color, dead_lumen_material_color, transparent_color,building_color,lava_color,bedrock_color};
	COLOR = colors[material_color_index_array[clamp(material_type, 0, 32)]];

	//COLOR.a*=clamp(pixel_map_data.a + 0.0, 0.0, 1.0);
}


/*
shader_type canvas_item;
uniform float zoom;
uniform vec2 rect_size;
uniform vec2 screen_center_position;
uniform vec4 scrap_materials_color = vec4(0.7, 0.2, 0.1,1.0);
uniform vec4 lumen_material_color = vec4(1.0, 0.5, 0.9,1.0);
uniform vec4 transparent_color = vec4(0.99, 0.49, 0.09,0.5);

bool is_equal_approx(float x, float y) {
	return abs(x - y) < 0.0001;
}


void fragment() {
	vec2 tex_size = vec2(textureSize(TEXTURE, 0));
	vec2 screen_center_UV = screen_center_position / tex_size;
	vec2 rect_size_UV = rect_size / tex_size;
	vec4 source = textureLod(TEXTURE, UV, clamp( (4.0/zoom)+2.0, 0.0, 4.0 ));
	vec4 pixel_map_data = textureLod(TEXTURE, UV, 0);
	int material_type = int(pixel_map_data.g * 255.0 + 0.5);
	vec4 colors[4] = {vec4(0.99, 0.49, 0.09,1.0), scrap_materials_color, lumen_material_color, transparent_color};
	COLOR = vec4(colors[material_color_index_array[clamp(material_type, 0, 32)]]);
	COLOR.a=COLOR.a*clamp(source.a+0.5, 0.0, 1.0);

}

*/
"

[resource]
shader = SubResource("20")
shader_parameter/zoom = 0.0
shader_parameter/rect_size = Vector2(0, 0)
shader_parameter/screen_center_position = Vector2(0, 0)
shader_parameter/terrain_color = Color(0.219608, 0.219608, 0.219608, 1)
shader_parameter/scrap_materials_color = Color(0.423529, 0.423529, 0.423529, 1)
shader_parameter/lumen_material_color = Color(0.843137, 0.207843, 0.34902, 1)
shader_parameter/transparent_color = Color(0.101961, 0.101961, 0.101961, 1)
shader_parameter/dead_lumen_material_color = Color(0.164706, 0.341176, 0.517647, 1)
shader_parameter/building_color = Color(0.0352941, 0.631373, 0.517647, 1)
shader_parameter/lava_color = Color(1, 0.282353, 0, 1)
shader_parameter/bedrock_color = Color(0.113725, 0.14902, 0.192157, 1)
