[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bdtek31c6o45h"]

[sub_resource type="Shader" id="45"]
code = "shader_type canvas_item;
uniform vec4 tint=vec4(1.0,1.0,1.0,1.0);
uniform float time_offset=0.0;

//by Vladimir Storm
//https://twitter.com/vladstorm_

//random hash
vec4 hash42(vec2 p){

	vec4 p4 = fract(vec4(p.xyxy) * vec4(443.8975,397.2973, 491.1871, 470.7827));
    p4 += dot(p4.wzxy, p4+19.19);
    return fract(vec4(p4.x * p4.y, p4.x*p4.z, p4.y*p4.w, p4.x*p4.w));
}


float hash( float n ){
    return fract(sin(n)*43758.5453123);
}

// 3d noise function (iq's)
float n( in vec3 x ){
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;
    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
    return res;
}

//tape noise
float nn(float t, vec2 p){


    float y = p.y;
    float s = t*2.;

    float v = (n( vec3(y*.01 +s, 			1., 1.0) ) + .0)
          	 *(n( vec3(y*.011+1000.0+s, 	1., 1.0) ) + .0)
          	 *(n( vec3(y*.51+421.0+s, 	1., 1.0) ) + .0)
        ;
    //v*= n( vec3( (fragCoord.xy + vec2(s,0.))*100.,1.0) );
   	v*= hash42(   vec2(p.x +t*0.01, p.y) ).x +.3 ;


    v = pow(v+.3, 1.);
	if(v<.7) v = 0.;  //threshold
    return v;
}

void fragment( ){

	vec2 iResolution = 1.0 / TEXTURE_PIXEL_SIZE;
    vec2 uv = UV;

    float linesN = 240.; //fields per seconds
    float one_y = iResolution.y / linesN; //field line
    uv = floor(uv*iResolution.xy/one_y)*one_y;

	float col =  nn(TIME+time_offset + sin(TIME+time_offset) * 0.5, uv);
    uv = UV;
    vec4 source = texture(TEXTURE, uv);
	//float PI = 3.14159265359;
	//float TAU = PI*2.0;
	float multiplier = 20.0;
	float time_multiplier = 40.0;
	float part_TAU = TAU/multiplier ;

	float _time = mod((TIME+time_offset)*20.0, TAU*multiplier*0.5) - TAU*multiplier*0.25 ;
	float _time2 = mod((TIME+time_offset)*10.0, TAU*multiplier*0.5) - TAU*multiplier*0.25 ;

	float is_sin = clamp(_time + (uv.y-0.5)*time_multiplier, 0, TAU);
	float is_sin2 = clamp(_time2 + (uv.y-0.5)*time_multiplier, 0, TAU);
//	uv.x += nn(TIME+time_offset + sin(is_sin) * 0.01, uv );
	uv.x += (sin(is_sin) * 0.005);

    vec4 color = texture(TEXTURE, uv)*COLOR*tint;
//	vec4 color2 = vec4(vec3( col ) *  (vec3(0.9, 0.49, 0.09)*0.4), 1.0);
//	color2 = color;
	COLOR = color;
//	COLOR = mix(color, color2, ceil(col))* source.a;
}"

[resource]
shader = SubResource("45")
shader_parameter/tint = Vector4(1, 1, 1, 1)
shader_parameter/time_offset = 0.0
