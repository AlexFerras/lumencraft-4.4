[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://cdencm1tje3b"]

[sub_resource type="Shader" id="75"]
code = "shader_type canvas_item;

uniform vec3 hsv_offset=vec3(0.0);
uniform vec4 work_color:source_color =vec4(0.0);
uniform vec3 range = vec3(1.0);


// All components are in the range [0…1], including hue.
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
 

// All components are in the range [0…1], including hue.
vec3 hsv2rgb(vec3 c)
{
	c.r+=hsv_offset.x;
	c.g+=hsv_offset.y;
	c.b+=hsv_offset.z;
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment()
{
	
	vec4 col =texture(TEXTURE,UV)*COLOR;
	vec3 hsv_col=rgb2hsv(col.rgb);
	vec3 work_col=rgb2hsv(work_color.rgb);
	float working=float(step(abs(work_col.x-hsv_col.x),range.x)+step(abs(work_col.y-hsv_col.y),range.y)+step(abs(work_col.z-hsv_col.z),range.z) >2.9);
	COLOR=col*(1.0-working)+vec4(hsv2rgb(hsv_col),col.a)*working;

	
	
}"

[resource]
shader = SubResource("75")
shader_parameter/hsv_offset = Vector3(0, 0, 0)
shader_parameter/work_color = Color(0.490196, 0.309804, 0, 1)
shader_parameter/range = Vector3(0.1, 0.876, 0.5)
